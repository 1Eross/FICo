
Данный микросервис является буфферным сервером между клиентом и главным сервером
?Микросервис должен находится вне виртиуальной сети главного сервера?

Функции:
1. Аунтентификация
2. Регистрацию пользователей
3. Возвращение JWT токена при авторизации 

Структура каталога:
1. '__init__.py' -  является скриптом, запускающим uvicorn api.py и передающим допоплнительные настройки
2. 'api.py' - экземпляр класса fastapi настроенный для адресации запросов и вызова нужных функций
3. 'reg.py' - содержит необходимые функции для регистрации пользователя
4. 'auth.py' - содрежит неообходимые функции для аутентификации пользователей
5. 'jwt.py' - содержит функции для создания jwt токена 

Важные аспекты, которые стоит учесть:
1. Разделение обязанностей:
Важно четко разделить обязанности между файлами и компонентами.
Например, файлы auth.py и reg.py могут быть более специфическими в отношении функциональности,
связанной с аутентификацией и регистрацией.

2. Работа с базой данных: 
Удостоверьтесь, что работа с базой данных (например, создание записей пользователей) 
выполняется безопасным и надежным способом, и что ваш микросервис управляет возможными ошибками, 
такими как дубликаты пользователей.

3. Безопасность: 
Уделите особое внимание безопасности. Важно обеспечить аутентификацию 
и регистрацию безопасным способом, защититься от атак, таких как инъекции SQL, 
и обеспечить хранение паролей пользователей в зашифрованной форме.

4. JWT токены: 
Убедитесь, что JWT токены, создаваемые вашим микросервисом, надежно подписаны и зашифрованы,
чтобы предотвратить подделку.

5. Логирование и мониторинг: 
Реализуйте логирование и мониторинг в вашем микросервисе, 
чтобы отслеживать действия пользователей и обнаруживать проблемы.

6. Обработка ошибок: Грамотно обрабатывайте ошибки и 
возвращайте понятные сообщения об ошибках клиентам.

7. Тестирование: Не забывайте о модульном и интеграционном тестировании 
вашего микросервиса, чтобы обеспечить его правильное функционирование.